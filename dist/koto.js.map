{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///koto.js","webpack:///webpack/bootstrap 5f448b9f77d5d7d40aae","webpack:///./chart.js","webpack:///external \"babel-polyfill\"","webpack:///external \"d3\"","webpack:///./assert.js","webpack:///./layer.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_interopRequireWildcard","newObj","key","Object","prototype","hasOwnProperty","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","TypeError","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","_typeof","Symbol","iterator","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","Array","isArray","_createClass","defineProperties","target","props","descriptor","defineProperty","protoProps","staticProps","_d2","d3","_assert","_assert2","_layer2","_layer3","Chart","selection","_this","base","hasDrawn","merge","configs","_len","arguments","args","_key","assign","apply","concat","accessors","_len2","_key2","promise","_layers","Map","_attached","_events","config","a","accessor","data","name","layer","delete","_chart","options","_layer","_Chart","get","set","remove","attachmentName","chart","rawData","attachmentData","_this2","promises","Promise","resolve","transform","then","preDraw","trigger","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","draw","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","entries","_step2$value","attachment","demux","all","postDraw","postTransition","callback","context","events","has","Set","add","_once","off","on","clear","forEach","event","clone","map","_len3","_key3","_event$callback","node","parentNode","removeChild","nameOrObject","setPercentage","calculatePercentage","initialValue","min","Math","definition","constrain","percentage","setter","console","warn","getter","item","init","_ref","_this3","getPrototypeOf","initialize","Layer","kotoAssert","test","message","Error","_base","_handlers","_lifecycleRe","dataBind","insert","eventName","handler","idx","handlers","splice","endAll","transition","n","each","promiseCallback","bound","entering","method","len","tidx","tlen","enter","exit","l","empty"],"mappings":"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","file":"koto.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babel-polyfill\", \"d3\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Koto\"] = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse\n\t\troot[\"Koto\"] = factory(root[\"babel-polyfill\"], root[\"d3\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babel-polyfill\", \"d3\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Koto\"] = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse\n\t\troot[\"Koto\"] = factory(root[\"babel-polyfill\"], root[\"d3\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(1);\n\t\n\tvar _d2 = __webpack_require__(2);\n\t\n\tvar d3 = _interopRequireWildcard(_d2);\n\t\n\tvar _assert = __webpack_require__(3);\n\t\n\tvar _assert2 = _interopRequireDefault(_assert);\n\t\n\tvar _layer2 = __webpack_require__(4);\n\t\n\tvar _layer3 = _interopRequireDefault(_layer2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// d3 is required\n\t(0, _assert2.default)(d3, 'd3 js is required.');\n\t/**\r\n\t * Create a koto chart\r\n\t *\r\n\t * @constructor\r\n\t *\r\n\t * @param {d3.selection} selection The chart's \"base\" DOM node. This should\r\n\t *        contain any nodes that the chart generates.\r\n\t */\n\t\n\tvar Chart = function () {\n\t  function Chart(selection) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, Chart);\n\t\n\t    this.base = selection; // Container for chart @type {d3.selection}.\n\t    this.hasDrawn = false; // Has this chart been drawn at least once?\n\t\n\t    this.merge = {};\n\t    this.merge.configs = function () {\n\t      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\t\n\t      _this.configs = Object.assign.apply(Object, [{}, _this.configs].concat(args));\n\t      return _this.configs;\n\t    };\n\t    this.merge.accessors = function () {\n\t      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t        args[_key2] = arguments[_key2];\n\t      }\n\t\n\t      _this.accessors = Object.assign.apply(Object, [{}, _this.accessors].concat(args));\n\t      return _this.accessors;\n\t    };\n\t\n\t    // exposed properties\n\t    this.configs = {};\n\t    this.accessors = {};\n\t    this.promise = null;\n\t\n\t    // private\n\t    this._layers = new Map();\n\t    this._attached = new Map();\n\t    this._events = new Map();\n\t\n\t    // alias\n\t    this.c = this.config;\n\t    this.a = this.accessor;\n\t  }\n\t\n\t  /**\r\n\t   * A \"hook\" method that you may define to modify input data before it is used\r\n\t   * to draw the chart's layers and attachments. This method will be used by all\r\n\t   * sub-classes. You may optionally return a promise if your data transformation\r\n\t   * is asynchronous (i.e. you're using web workers).\r\n\t   *\r\n\t   * Note: you will most likely never call this method directly, but rather\r\n\t   * include it as part of a chart definition, and then rely on koto to\r\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\r\n\t   *\r\n\t   * @param {Array} data Input data provided to @link Chart#draw}.\r\n\t   * @returns {mixed} Data to be used in drawing the chart's layers and\r\n\t   *                  attachments.\r\n\t   */\n\t\n\t\n\t  _createClass(Chart, [{\n\t    key: 'transform',\n\t    value: function transform(data) {\n\t      return data;\n\t    }\n\t\n\t    /**\r\n\t     * A \"hook\" method that you may define to choose which mutation of the input\r\n\t     * data is sent to which of the attached charts (by name). This method will\r\n\t     * be used by all sub-classes. This only applies to charts that use the\r\n\t     * {@link Chart#attach} method.\r\n\t     *\r\n\t     * Note: you will most likely never call this method directly, but rather\r\n\t     * include it as part of a chart definition, and then rely on koto to\r\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\r\n\t     *\r\n\t     * @param {String} data Name of attached chart defined in {@link Chart#attach}.\r\n\t     * @param {Array} data Input data provided to {@link Chart#draw}.\r\n\t     * @returns {mixed} Data to be used in drawing the chart's layers and\r\n\t     *                  attachments.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'demux',\n\t    value: function demux(name, data) {\n\t      return data;\n\t    }\n\t\n\t    /**\r\n\t     * A \"hook\" method that will allow you to run some arbitrary code before\r\n\t     * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\r\n\t     *\r\n\t     * Note: you will most likely never call this method directly, but rather\r\n\t     * include it as part of a chart definition, and then rely on koto to\r\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\r\n\t     *\r\n\t     * Note 2: a `postDraw` event is also fired when appropriate;\r\n\t     *\r\n\t     * @param  {[type]} data [description]\r\n\t     * @return {[type]}      [description]\r\n\t     */\n\t\n\t  }, {\n\t    key: 'preDraw',\n\t    value: function preDraw() {}\n\t\n\t    /**\r\n\t     * A \"hook\" method that will allow you to run some arbitrary code after\r\n\t     * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\r\n\t     *\r\n\t     * Note: you will most likely never call this method directly, but rather\r\n\t     * include it as part of a chart definition, and then rely on koto to\r\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\r\n\t     *\r\n\t     * @param  {[type]} data [description]\r\n\t     */\n\t\n\t  }, {\n\t    key: 'postDraw',\n\t    value: function postDraw() {}\n\t\n\t    /**\r\n\t     * A \"hook\" method that will allow you to run some arbitrary code after\r\n\t     * {@link Chart#draw} is called AND after all transitions for all layers\r\n\t     * and attached charts have been completed. This will run every time\r\n\t     * {@link Chart#draw} is called.\r\n\t     *\r\n\t     * Note: you will most likely never call this method directly, but rather\r\n\t     * include it as part of a chart definition, and then rely on koto to\r\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\r\n\t     *\r\n\t     * Note 2: a `postTransition` event is also fired when appropriate;\r\n\t     *\r\n\t     * @param  {[type]} data\r\n\t     */\n\t\n\t  }, {\n\t    key: 'postTransition',\n\t    value: function postTransition() {}\n\t\n\t    /**\r\n\t     * Remove a layer from the chart.\r\n\t     *\r\n\t     * @param {String} name The name of the layer to remove.\r\n\t     * @returns {Layer} The layer removed by this operation.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'unlayer',\n\t    value: function unlayer(name) {\n\t      var layer = this.layer(name);\n\t\n\t      this._layers.delete(name);\n\t      delete layer._chart;\n\t\n\t      return layer;\n\t    }\n\t\n\t    /**\r\n\t     * Interact with the chart's {@link Layer|layers}.\r\n\t     *\r\n\t     * If only a `name` is provided, simply return the layer registered to that\r\n\t     * name (if any).\r\n\t     *\r\n\t     * If a `name` and `selection` are provided, treat the `selection` as a\r\n\t     * previously-created layer and attach it to the chart with the specified\r\n\t     * `name`.\r\n\t     *\r\n\t     * If all three arguments are specified, initialize a new {@link Layer} using\r\n\t     * the specified `selection` as a base passing along the specified `options`.\r\n\t     *\r\n\t     * The {@link Layer.draw} method of attached layers will be invoked\r\n\t     * whenever this chart's {@link Chart#draw} is invoked and will receive the\r\n\t     * data (optionally modified by the chart's {@link Chart#transform} method.\r\n\t     *\r\n\t     * @param {String} name Name of the layer to attach or retrieve.\r\n\t     * @param {d3.selection|Layer} [selection] The layer's base or a\r\n\t     *        previously-created {@link Layer}.\r\n\t     * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\r\n\t     *        constructor}\r\n\t     *\r\n\t     * @returns {Layer}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'layer',\n\t    value: function layer(name, selection, options) {\n\t      var _Chart = this;\n\t      var _layer;\n\t\n\t      if (arguments.length === 1) {\n\t        return this._layers.get(name);\n\t      }\n\t\n\t      // we are reattaching a previous layer, which the\n\t      // selection argument is now set to.\n\t      if (arguments.length === 2) {\n\t\n\t        if (selection instanceof _layer3.default) {\n\t          selection._chart = this;\n\t          this._layers.set(name, selection);\n\t          return this._layers.get(name);\n\t        } else {\n\t          (0, _assert2.default)(false, 'When reattaching a layer, the second argument must be a koto layer');\n\t        }\n\t      }\n\t\n\t      selection._chart = this;\n\t\n\t      _layer = new _layer3.default(selection, options);\n\t\n\t      _layer.remove = function () {\n\t        _Chart._layers.delete(name);\n\t        return this;\n\t      };\n\t\n\t      this._layers.set(name, _layer);\n\t\n\t      return _layer;\n\t    }\n\t\n\t    /**\r\n\t     * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\r\n\t     * method will be invoked whenever the containing chart's `draw` method is\r\n\t     * invoked.\r\n\t     *\r\n\t     * @param {String} attachmentName Name of the attachment\r\n\t     * @param {Chart} [chart] koto to register as a mix in of this chart. When\r\n\t     *        unspecified, this method will return the attachment previously\r\n\t     *        registered with the specified `attachmentName` (if any).\r\n\t     *\r\n\t     * @returns {Chart} Reference to this chart (chainable).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'attach',\n\t    value: function attach(attachmentName, chart) {\n\t      if (arguments.length === 1) {\n\t        return this._attached.get(attachmentName);\n\t      }\n\t\n\t      this._attached.set(attachmentName, chart);\n\t      return chart;\n\t    }\n\t\n\t    /**\r\n\t     * Update the chart's representation in the DOM, drawing all of its layers and\r\n\t     * any \"attachment\" charts (as attached via {@link Chart#attach}).\r\n\t     *\r\n\t     * Note: The first time you call this method, the property `hasDrawn` will be\r\n\t     * set to true. This is helpful if you want to only run some code on the first\r\n\t     * time the chart is drawn.\r\n\t     *\r\n\t     * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\r\n\t     *        this cart's {@link Layer|layers} (if any) and the {@link\r\n\t     *        Chart#draw|draw method} of this chart's attachments (if any).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(rawData) {\n\t      var _this2 = this;\n\t\n\t      var layer,\n\t          attachmentData,\n\t          promises = [];\n\t\n\t      return Promise.resolve(this.transform(rawData)).then(function (data) {\n\t        _this2.preDraw(data);\n\t        _this2.trigger('preDraw', data);\n\t\n\t        var _iteratorNormalCompletion = true;\n\t        var _didIteratorError = false;\n\t        var _iteratorError = undefined;\n\t\n\t        try {\n\t          for (var _iterator = _this2._layers.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            layer = _step.value;\n\t\n\t            layer.draw(data);\n\t            promises.push(layer.promise);\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError = true;\n\t          _iteratorError = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t              _iterator.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError) {\n\t              throw _iteratorError;\n\t            }\n\t          }\n\t        }\n\t\n\t        var _iteratorNormalCompletion2 = true;\n\t        var _didIteratorError2 = false;\n\t        var _iteratorError2 = undefined;\n\t\n\t        try {\n\t          for (var _iterator2 = _this2._attached.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t            var _step2$value = _slicedToArray(_step2.value, 2),\n\t                attachmentName = _step2$value[0],\n\t                attachment = _step2$value[1];\n\t\n\t            attachmentData = _this2.demux ? _this2.demux(attachmentName, data) : data;\n\t            attachment.draw(attachmentData);\n\t            promises.push(attachment.promise);\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError2 = true;\n\t          _iteratorError2 = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t              _iterator2.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError2) {\n\t              throw _iteratorError2;\n\t            }\n\t          }\n\t        }\n\t\n\t        _this2.hasDrawn = true;\n\t\n\t        _this2.promise = Promise.all(promises);\n\t\n\t        _this2.postDraw();\n\t        _this2.trigger('postDraw', data);\n\t\n\t        _this2.promise.then(function () {\n\t          _this2.postTransition(data);\n\t          _this2.trigger('postTransition', data);\n\t        });\n\t\n\t        return data;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * Subscribe a callback function to an event triggered on the chart. See {@link\r\n\t     * Chart#once} to subscribe a callback function to an event for one occurrence.\r\n\t     *\r\n\t     * @externalExample {runnable} chart-on\r\n\t     *\r\n\t     * @param {String} name Name of the event\r\n\t     * @param {ChartEventHandler} callback Function to be invoked when the event\r\n\t     *        occurs\r\n\t     * @param {Object} [context] Value to set as `this` when invoking the\r\n\t     *        `callback`. Defaults to the chart instance.\r\n\t     *\r\n\t     * @returns {Chart} A reference to this chart (chainable).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(name, callback, context) {\n\t      var events;\n\t      if (this._events.has(name)) {\n\t        events = this._events.get(name);\n\t      } else {\n\t        events = new Set();\n\t      }\n\t\n\t      events.add({\n\t        callback: callback,\n\t        context: context || this,\n\t        _chart: this\n\t      });\n\t\n\t      this._events.set(name, events);\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * Subscribe a callback function to an event triggered on the chart. This\r\n\t     * function will be invoked at the next occurrence of the event and immediately\r\n\t     * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\r\n\t     * event indefinitely.\r\n\t     *\r\n\t     * @externalExample {runnable} chart-once\r\n\t     *\r\n\t     * @param {String} name Name of the event\r\n\t     * @param {ChartEventHandler} callback Function to be invoked when the event\r\n\t     *        occurs\r\n\t     * @param {Object} [context] Value to set as `this` when invoking the\r\n\t     *        `callback`. Defaults to the chart instance\r\n\t     *\r\n\t     * @returns {Chart} A reference to this chart (chainable)\r\n\t     */\n\t\n\t  }, {\n\t    key: 'once',\n\t    value: function once(name, callback, context) {\n\t      var self = this;\n\t      var _once = function _once() {\n\t        self.off(name, _once);\n\t        callback.apply(this, arguments);\n\t      };\n\t      return this.on(name, _once, context);\n\t    }\n\t\n\t    /**\r\n\t     * Unsubscribe one or more callback functions from an event triggered on the\r\n\t     * chart. When no arguments are specified, *all* handlers will be unsubscribed.\r\n\t     * When only a `name` is specified, all handlers subscribed to that event will\r\n\t     * be unsubscribed. When a `name` and `callback` are specified, only that\r\n\t     * function will be unsubscribed from that event. When a `name` and `context`\r\n\t     * are specified (but `callback` is omitted), all events bound to the given\r\n\t     * event with the given context will be unsubscribed.\r\n\t     *\r\n\t     * @externalExample {runnable} chart-off\r\n\t     *\r\n\t     * @param {String} [name] Name of the event to be unsubscribed\r\n\t     * @param {ChartEventHandler} [callback] Function to be unsubscribed\r\n\t     * @param {Object} [context] Contexts to be unsubscribed\r\n\t     *\r\n\t     * @returns {Chart} A reference to this chart (chainable).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'off',\n\t    value: function off(name, callback, context) {\n\t\n\t      // remove all events\n\t      if (arguments.length === 0) {\n\t        this._events.clear();\n\t        return this;\n\t      }\n\t\n\t      // remove all events for a specific name\n\t      if (arguments.length === 1) {\n\t        if (this._events.has(name)) {\n\t          this._events.get(name).clear();\n\t        }\n\t        return this;\n\t      }\n\t\n\t      // remove all events that match whatever combination of name, context\n\t      // and callback.\n\t\n\t      this._events.get(name).forEach(function (event, clone, map) {\n\t        if (callback && callback === clone.callback || context && context === clone.context) {\n\t          map.delete(event);\n\t        }\n\t      });\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * Publish an event on this chart with the given `name`.\r\n\t     *\r\n\t     * @externalExample {runnable} chart-trigger\r\n\t     *\r\n\t     * @param {String} name Name of the event to publish\r\n\t     * @param {...*} arguments Values with which to invoke the registered\r\n\t     *        callbacks.\r\n\t     *\r\n\t     * @returns {Chart} A reference to this chart (chainable).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'trigger',\n\t    value: function trigger(name) {\n\t      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t        args[_key3 - 1] = arguments[_key3];\n\t      }\n\t\n\t      if (this._events.has(name)) {\n\t        this._events.get(name).forEach(function (event) {\n\t          var _event$callback;\n\t\n\t          (_event$callback = event.callback).call.apply(_event$callback, [event.context].concat(args));\n\t        });\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * Cleanly dispose of chart\r\n\t     *\r\n\t     * @return undefined\r\n\t     */\n\t\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      var node = this.base.node();\n\t\n\t      // exposed properties\n\t      this.configs = {};\n\t      this.accessors = {};\n\t      this.promise = null;\n\t\n\t      // clear up remaining data\n\t      this._layers.clear();\n\t      this._attached.clear();\n\t      this._events.clear();\n\t\n\t      if (node.parentNode) {\n\t        node.parentNode.removeChild(node);\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Get and set chart options (or configs)\r\n\t     *\r\n\t     * @param  {mixed} nameOrObject Name of item getting or setting\r\n\t     *                              or an object with key-value pairs.\r\n\t     * @param  {mixed} value The value for config item with that name.\r\n\t     * @return {mixed} if getting: the value. if setting: the chart instance.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'config',\n\t    value: function config(nameOrObject, value) {\n\t      var key;\n\t      var definition;\n\t      var _Chart = this;\n\t\n\t      function setPercentage() {\n\t        function calculatePercentage(arr, initialValue) {\n\t          var min = Math.min.call(null, arr.map(function (name) {\n\t            return _Chart.config(name);\n\t          }));\n\t          return initialValue / min;\n\t        }\n\t\n\t        if (definition.constrain === true) {\n\t          definition.percentage = calculatePercentage(['width', 'height'], definition.value);\n\t        } else if (Array.isArray(definition.constrain)) {\n\t          definition.percentage = calculatePercentage(definition.constrain, definition.value);\n\t        } else {\n\t          definition.percentage = calculatePercentage([definition.constrain], definition.value);\n\t        }\n\t      }\n\t\n\t      if (arguments.length === 0) {\n\t        return this.configs;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        if ((typeof nameOrObject === 'undefined' ? 'undefined' : _typeof(nameOrObject)) === 'object') {\n\t          for (key in nameOrObject) {\n\t            if (this.configs.hasOwnProperty(key)) {\n\t              definition = this.configs[key];\n\t              if (definition.hasOwnProperty('setter')) {\n\t                definition.value = definition.setter.call(definition, nameOrObject[key]);\n\t              } else {\n\t                definition.value = nameOrObject[key];\n\t              }\n\t              if (definition.hasOwnProperty('constrain')) {\n\t                setPercentage();\n\t              }\n\t              this.configs[key] = definition;\n\t            } else {\n\t              console.warn('config with name ' + nameOrObject + ' is not defined.');\n\t            }\n\t          }\n\t          return this;\n\t        }\n\t\n\t        (0, _assert2.default)(this.configs.hasOwnProperty(nameOrObject), nameOrObject + ' is not a valid option.');\n\t        definition = this.configs[nameOrObject];\n\t        if (definition.hasOwnProperty('getter')) {\n\t          return definition.getter.call(definition);\n\t        }\n\t        return definition.value;\n\t      }\n\t\n\t      if (arguments.length === 2) {\n\t        if (this.configs.hasOwnProperty(nameOrObject)) {\n\t          definition = this.configs[nameOrObject];\n\t          if (definition.hasOwnProperty('setter')) {\n\t            definition.value = definition.setter.call(definition, value);\n\t          } else {\n\t            definition.value = value;\n\t          }\n\t          if (definition.hasOwnProperty('constrain')) {\n\t            setPercentage();\n\t          }\n\t          this.configs[nameOrObject] = definition;\n\t        } else {\n\t          console.warn('config with name ' + nameOrObject + ' is not defined.');\n\t        }\n\t        return this;\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * This will get or set any of the chart's accessors.\r\n\t     *\r\n\t     * @param  {String or Object} item If string, it will return the function for that accessor item.\r\n\t     *                                 If object, it will update that accessor with set function.\r\n\t     * @param  {function} [value] The function to update accessor item with.\r\n\t     * @return {object} The chart to preserve chainability.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'accessor',\n\t    value: function accessor(item, value) {\n\t      var key;\n\t      if (arguments.length === 0) {\n\t        return this.accessors;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        if (typeof item === 'string') {\n\t          (0, _assert2.default)(this.accessors.hasOwnProperty(item), item + ' is not a valid accessor.');\n\t          return this.accessors[item];\n\t        } else {\n\t          for (key in item) {\n\t            this.accessors[key] = item[key];\n\t          }\n\t        }\n\t      } else {\n\t        this.accessors[item] = value;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * This will extend a chart by passing in an object of initialize function.\r\n\t     * @param  {Object || function} init Initialize function of object with initialize method.\r\n\t     * @return {Construtor}      Chart constructor\r\n\t     */\n\t\n\t  }], [{\n\t    key: 'extend',\n\t    value: function extend(init) {\n\t      var chart = function (_ref) {\n\t        _inherits(chart, _ref);\n\t\n\t        function chart(selection) {\n\t          _classCallCheck(this, chart);\n\t\n\t          var key;\n\t\n\t          var _this3 = _possibleConstructorReturn(this, (chart.__proto__ || Object.getPrototypeOf(chart)).call(this, selection));\n\t\n\t          if (typeof init === 'function') {\n\t            init.call(_this3);\n\t          } else {\n\t            for (key in init) {\n\t              _this3[key] = init[key];\n\t            }\n\t            _this3.initialize.call(_this3);\n\t          }\n\t\n\t          return _this3;\n\t        }\n\t\n\t        return chart;\n\t      }(this);\n\t\n\t      return chart;\n\t    }\n\t  }]);\n\t\n\t  return Chart;\n\t}();\n\t\n\t/**\r\n\t* Expose the Layer class so that it can be subclassed.\r\n\t*/\n\t\n\t\n\tChart.Layer = _layer3.default;\n\t\n\t// run tests if on test environment\n\tif (false) {\n\t  require('./assert.spec.js')(_assert2.default);\n\t  require('./layer.spec.js')(_layer3.default, Chart);\n\t  require('./chart.spec.js')(Chart);\n\t}\n\t\n\tmodule.exports = Chart;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\r\n\t * Simple Assertion function\r\n\t * @param  {anything} test    Anything that will evaluate to true of false.\r\n\t * @param  {string} message The error message to send if `test` is false\r\n\t */\n\tfunction kotoAssert(test, message) {\n\t  if (test) {\n\t    return;\n\t  }\n\t  throw new Error(\"[koto] \" + message);\n\t}\n\t\n\texports.default = kotoAssert;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _assert = __webpack_require__(3);\n\t\n\tvar _assert2 = _interopRequireDefault(_assert);\n\t\n\tvar _d = __webpack_require__(2);\n\t\n\tvar d3 = _interopRequireWildcard(_d);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Create a layer using the provided `base` selection.\r\n\t *\r\n\t * @class\r\n\t *\r\n\t * @param {d3.selection} base The containing DOM node for the layer.\r\n\t * @param {Object} options Overrides for databind, insert and event methods.\r\n\t * @param {Function} options.databind databind override\r\n\t * @param {Function} options.insert insert override\r\n\t * @param {Function} [options.events] life-cycle event handler overrides.\r\n\t *                                  Possible values are [enter, update, merge, exit]\r\n\t *                                  with or without the 'transition postfix'.\r\n\t */\n\tvar Layer = function () {\n\t  function Layer(base, options) {\n\t    _classCallCheck(this, Layer);\n\t\n\t    this._base = base;\n\t    this._handlers = {};\n\t    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\t\n\t    if (options) {\n\t      // Set layer methods (required)\n\t      this.dataBind = options.dataBind;\n\t      this.insert = options.insert;\n\t\n\t      // Bind events (optional)\n\t      if ('events' in options) {\n\t        for (var eventName in options.events) {\n\t          this.on(eventName, options.events[eventName]);\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\r\n\t   * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\r\n\t   * implementation is \"virtual\"--it *must* be overridden by Layer instances.\r\n\t   *\r\n\t   * @param {Array} data Value passed to {@link Layer#draw}\r\n\t   * @param {Object} [context] the instance of this layers\r\n\t   */\n\t\n\t\n\t  _createClass(Layer, [{\n\t    key: 'dataBind',\n\t    value: function dataBind() {\n\t      (0, _assert2.default)(false, 'Layers must specify a dataBind method.');\n\t    }\n\t\n\t    /**\r\n\t     * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\r\n\t     * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\r\n\t     * Layer instances.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'insert',\n\t    value: function insert() {\n\t      (0, _assert2.default)(false, 'Layers must specify an `insert` method.');\n\t    }\n\t\n\t    /**\r\n\t     * Subscribe a handler to a lifecycle event. These events (and only these\r\n\t     * events) are triggered when {@link Layer#draw} is invoked--see that method\r\n\t     * for more details on lifecycle events.\r\n\t     *\r\n\t     * @param {String} eventName Identifier for the lifecycle event for which to\r\n\t     *        subscribe.\r\n\t     * @param {Function} handler Callback function\r\n\t     *\r\n\t     * @returns {Chart} Reference to the layer instance (for chaining).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(eventName, handler, options) {\n\t      options = options || {};\n\t\n\t      (0, _assert2.default)(this._lifecycleRe.test(eventName), 'Unrecognized lifecycle event name specified to \\'Layer#on\\': \\'' + eventName + '\\'.');\n\t\n\t      if (!(eventName in this._handlers)) {\n\t        this._handlers[eventName] = [];\n\t      }\n\t      this._handlers[eventName].push({\n\t        callback: handler,\n\t        chart: options.chart || null\n\t      });\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * Unsubscribe the specified handler from the specified event. If no handler is\r\n\t     * supplied, remove *all* handlers from the event.\r\n\t     *\r\n\t     * @param {String} eventName Identifier for event from which to remove\r\n\t     *        unsubscribe\r\n\t     * @param {Function} handler Callback to remove from the specified event\r\n\t     *\r\n\t     * @returns {Chart} Reference to the layer instance (for chaining).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'off',\n\t    value: function off(eventName, handler) {\n\t      var handlers = this._handlers[eventName];\n\t      var idx;\n\t\n\t      (0, _assert2.default)(this._lifecycleRe.test(eventName), 'Unrecognized lifecycle event name specified to \\'Layer#on\\': \\'' + eventName + '\\'.');\n\t\n\t      if (!handlers) {\n\t        return this;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        handlers.length = 0;\n\t        return this;\n\t      }\n\t\n\t      for (idx = handlers.length - 1; idx > -1; --idx) {\n\t        if (handlers[idx].callback === handler) {\n\t          handlers.splice(idx, 1);\n\t        }\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * Render the layer according to the input data. Bind the data to the layer\r\n\t     * (according to {@link Layer#dataBind}, insert new elements (according to\r\n\t     * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\r\n\t     * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\r\n\t     *\r\n\t     * - update\r\n\t     * - update:transition\r\n\t     * - enter\r\n\t     * - enter:transition\r\n\t     * - exit\r\n\t     * - exit:transition\r\n\t     *\r\n\t     * @param {Array} data Data to drive the rendering.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      var bound,\n\t          entering,\n\t          events,\n\t          selection,\n\t          method,\n\t          handlers,\n\t          eventName,\n\t          idx,\n\t          len,\n\t          tidx,\n\t          tlen,\n\t          promises = [];\n\t\n\t      function endAll(transition, callback) {\n\t        var n = 0;\n\t        transition.each(function inc() {\n\t          ++n;\n\t        }).on('end', function done() {\n\t          if (! --n) {\n\t            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t              args[_key] = arguments[_key];\n\t            }\n\t\n\t            callback.apply(this, args);\n\t          }\n\t        });\n\t      }\n\t\n\t      function promiseCallback(resolve) {\n\t        selection.call(endAll, function allDone() {\n\t          return resolve(true);\n\t        });\n\t      }\n\t\n\t      bound = this.dataBind.call(this._base, data, this);\n\t\n\t      (0, _assert2.default)(bound instanceof d3.selection, 'Invalid selection defined by `Layer#dataBind` method.');\n\t      (0, _assert2.default)(bound.enter, 'Layer selection not properly bound.');\n\t\n\t      entering = bound.enter();\n\t      entering._chart = this._base._chart;\n\t\n\t      events = [{\n\t        name: 'update',\n\t        selection: bound\n\t      }, {\n\t        name: 'enter',\n\t        selection: entering,\n\t        method: this.insert\n\t      }, {\n\t        name: 'merge',\n\t        // Although the `merge` lifecycle event shares its selection object\n\t        // with the `update` lifecycle event, the object's contents will be\n\t        // modified when koto invokes the user-supplied `insert` method\n\t        // when triggering the `enter` event.\n\t        selection: bound\n\t      }, {\n\t        name: 'exit',\n\t        // Although the `exit` lifecycle event shares its selection object\n\t        // with the `update` and `merge` lifecycle events, the object's\n\t        // contents will be modified when koto invokes\n\t        // `d3.selection.exit`.\n\t        selection: bound,\n\t        method: bound.exit\n\t      }];\n\t\n\t      for (var i = 0, l = events.length; i < l; ++i) {\n\t        eventName = events[i].name;\n\t        selection = events[i].selection;\n\t        method = events[i].method;\n\t\n\t        // Some lifecycle selections modify shared state, so they must be\n\t        // deferred until just prior to handler invocation.\n\t        if (typeof method === 'function') {\n\t          selection = method.call(selection, selection);\n\t        }\n\t\n\t        if (selection.empty()) {\n\t          continue;\n\t        }\n\t\n\t        (0, _assert2.default)(selection && selection instanceof d3.selection, 'Invalid selection defined for ' + eventName + ' lifecycle event.');\n\t\n\t        handlers = this._handlers[eventName];\n\t\n\t        if (handlers) {\n\t          for (idx = 0, len = handlers.length; idx < len; ++idx) {\n\t            // Attach a reference to the parent chart so the selection's\n\t            // `chart` method will function correctly.\n\t            selection._chart = handlers[idx].chart || this._base._chart;\n\t            // selection.call(handlers[idx].callback);\n\t            handlers[idx].callback.call(selection, selection);\n\t          }\n\t        }\n\t\n\t        handlers = this._handlers[eventName + ':transition'];\n\t\n\t        if (handlers && handlers.length) {\n\t          selection = selection.transition();\n\t          for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n\t            selection._chart = handlers[tidx].chart || this._base._chart;\n\t            // selection.call(handlers[tidx].callback);\n\t            handlers[tidx].callback.call(selection, selection);\n\t            promises.push(new Promise(promiseCallback));\n\t          }\n\t        }\n\t        this.promise = Promise.all(promises);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Layer;\n\t}();\n\t\n\texports.default = Layer;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// koto.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5f448b9f77d5d7d40aae","import 'babel-polyfill';\r\nimport * as d3 from 'd3';\r\nimport kotoAssert from './assert.js';\r\nimport Layer from './layer.js';\r\n\r\n// d3 is required\r\nkotoAssert(d3, 'd3 js is required.');\r\n/**\r\n * Create a koto chart\r\n *\r\n * @constructor\r\n *\r\n * @param {d3.selection} selection The chart's \"base\" DOM node. This should\r\n *        contain any nodes that the chart generates.\r\n */\r\nclass Chart {\r\n  constructor(selection) {\r\n    this.base = selection; // Container for chart @type {d3.selection}.\r\n    this.hasDrawn = false; // Has this chart been drawn at least once?\r\n\r\n    this.merge = {};\r\n    this.merge.configs = (...args) => {\r\n      this.configs = Object.assign({}, this.configs, ...args);\r\n      return this.configs;\r\n    };\r\n    this.merge.accessors = (...args) => {\r\n      this.accessors = Object.assign({}, this.accessors, ...args);\r\n      return this.accessors;\r\n    };\r\n\r\n    // exposed properties\r\n    this.configs = {};\r\n    this.accessors = {};\r\n    this.promise = null;\r\n\r\n    // private\r\n    this._layers = new Map();\r\n    this._attached = new Map();\r\n    this._events = new Map();\r\n\r\n    // alias\r\n    this.c = this.config;\r\n    this.a = this.accessor;\r\n  }\r\n\r\n  /**\r\n   * A \"hook\" method that you may define to modify input data before it is used\r\n   * to draw the chart's layers and attachments. This method will be used by all\r\n   * sub-classes. You may optionally return a promise if your data transformation\r\n   * is asynchronous (i.e. you're using web workers).\r\n   *\r\n   * Note: you will most likely never call this method directly, but rather\r\n   * include it as part of a chart definition, and then rely on koto to\r\n   * invoke it when you draw the chart with {@link Chart#draw}.\r\n   *\r\n   * @param {Array} data Input data provided to @link Chart#draw}.\r\n   * @returns {mixed} Data to be used in drawing the chart's layers and\r\n   *                  attachments.\r\n   */\r\n  transform(data) { return data; }\r\n\r\n  /**\r\n   * A \"hook\" method that you may define to choose which mutation of the input\r\n   * data is sent to which of the attached charts (by name). This method will\r\n   * be used by all sub-classes. This only applies to charts that use the\r\n   * {@link Chart#attach} method.\r\n   *\r\n   * Note: you will most likely never call this method directly, but rather\r\n   * include it as part of a chart definition, and then rely on koto to\r\n   * invoke it when you draw the chart with {@link Chart#draw}.\r\n   *\r\n   * @param {String} data Name of attached chart defined in {@link Chart#attach}.\r\n   * @param {Array} data Input data provided to {@link Chart#draw}.\r\n   * @returns {mixed} Data to be used in drawing the chart's layers and\r\n   *                  attachments.\r\n   */\r\n  demux(name, data) { return data; }\r\n\r\n  /**\r\n   * A \"hook\" method that will allow you to run some arbitrary code before\r\n   * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\r\n   *\r\n   * Note: you will most likely never call this method directly, but rather\r\n   * include it as part of a chart definition, and then rely on koto to\r\n   * invoke it when you draw the chart with {@link Chart#draw}.\r\n   *\r\n   * Note 2: a `postDraw` event is also fired when appropriate;\r\n   *\r\n   * @param  {[type]} data [description]\r\n   * @return {[type]}      [description]\r\n   */\r\n  preDraw() {}\r\n\r\n  /**\r\n   * A \"hook\" method that will allow you to run some arbitrary code after\r\n   * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\r\n   *\r\n   * Note: you will most likely never call this method directly, but rather\r\n   * include it as part of a chart definition, and then rely on koto to\r\n   * invoke it when you draw the chart with {@link Chart#draw}.\r\n   *\r\n   * @param  {[type]} data [description]\r\n   */\r\n  postDraw() {}\r\n\r\n  /**\r\n   * A \"hook\" method that will allow you to run some arbitrary code after\r\n   * {@link Chart#draw} is called AND after all transitions for all layers\r\n   * and attached charts have been completed. This will run every time\r\n   * {@link Chart#draw} is called.\r\n   *\r\n   * Note: you will most likely never call this method directly, but rather\r\n   * include it as part of a chart definition, and then rely on koto to\r\n   * invoke it when you draw the chart with {@link Chart#draw}.\r\n   *\r\n   * Note 2: a `postTransition` event is also fired when appropriate;\r\n   *\r\n   * @param  {[type]} data\r\n   */\r\n  postTransition() {}\r\n\r\n  /**\r\n   * Remove a layer from the chart.\r\n   *\r\n   * @param {String} name The name of the layer to remove.\r\n   * @returns {Layer} The layer removed by this operation.\r\n   */\r\n  unlayer(name) {\r\n    var layer = this.layer(name);\r\n\r\n    this._layers.delete(name);\r\n    delete layer._chart;\r\n\r\n    return layer;\r\n  }\r\n\r\n  /**\r\n   * Interact with the chart's {@link Layer|layers}.\r\n   *\r\n   * If only a `name` is provided, simply return the layer registered to that\r\n   * name (if any).\r\n   *\r\n   * If a `name` and `selection` are provided, treat the `selection` as a\r\n   * previously-created layer and attach it to the chart with the specified\r\n   * `name`.\r\n   *\r\n   * If all three arguments are specified, initialize a new {@link Layer} using\r\n   * the specified `selection` as a base passing along the specified `options`.\r\n   *\r\n   * The {@link Layer.draw} method of attached layers will be invoked\r\n   * whenever this chart's {@link Chart#draw} is invoked and will receive the\r\n   * data (optionally modified by the chart's {@link Chart#transform} method.\r\n   *\r\n   * @param {String} name Name of the layer to attach or retrieve.\r\n   * @param {d3.selection|Layer} [selection] The layer's base or a\r\n   *        previously-created {@link Layer}.\r\n   * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\r\n   *        constructor}\r\n   *\r\n   * @returns {Layer}\r\n   */\r\n  layer(name, selection, options) {\r\n    var _Chart = this;\r\n    var _layer;\r\n\r\n    if (arguments.length === 1) {\r\n      return this._layers.get(name);\r\n    }\r\n\r\n    // we are reattaching a previous layer, which the\r\n    // selection argument is now set to.\r\n    if (arguments.length === 2) {\r\n\r\n      if (selection instanceof Layer) {\r\n        selection._chart = this;\r\n        this._layers.set(name, selection);\r\n        return this._layers.get(name);\r\n\r\n      } else {\r\n        kotoAssert(false, 'When reattaching a layer, the second argument must be a koto layer');\r\n      }\r\n    }\r\n\r\n    selection._chart = this;\r\n\r\n    _layer = new Layer(selection, options);\r\n\r\n    _layer.remove = function () {\r\n      _Chart._layers.delete(name);\r\n      return this;\r\n    };\r\n\r\n    this._layers.set(name, _layer);\r\n\r\n    return _layer;\r\n  }\r\n\r\n  /**\r\n   * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\r\n   * method will be invoked whenever the containing chart's `draw` method is\r\n   * invoked.\r\n   *\r\n   * @param {String} attachmentName Name of the attachment\r\n   * @param {Chart} [chart] koto to register as a mix in of this chart. When\r\n   *        unspecified, this method will return the attachment previously\r\n   *        registered with the specified `attachmentName` (if any).\r\n   *\r\n   * @returns {Chart} Reference to this chart (chainable).\r\n   */\r\n  attach(attachmentName, chart) {\r\n    if (arguments.length === 1) {\r\n      return this._attached.get(attachmentName);\r\n    }\r\n\r\n    this._attached.set(attachmentName, chart);\r\n    return chart;\r\n  }\r\n\r\n  /**\r\n   * Update the chart's representation in the DOM, drawing all of its layers and\r\n   * any \"attachment\" charts (as attached via {@link Chart#attach}).\r\n   *\r\n   * Note: The first time you call this method, the property `hasDrawn` will be\r\n   * set to true. This is helpful if you want to only run some code on the first\r\n   * time the chart is drawn.\r\n   *\r\n   * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\r\n   *        this cart's {@link Layer|layers} (if any) and the {@link\r\n   *        Chart#draw|draw method} of this chart's attachments (if any).\r\n   */\r\n  draw(rawData) {\r\n    var layer, attachmentData, promises = [];\r\n\r\n    return Promise.resolve(this.transform(rawData))\r\n      .then((data) => {\r\n        this.preDraw(data);\r\n        this.trigger('preDraw', data);\r\n\r\n        for (layer of this._layers.values()) {\r\n          layer.draw(data);\r\n          promises.push(layer.promise);\r\n        }\r\n\r\n        for (var [attachmentName, attachment] of this._attached.entries()) {\r\n          attachmentData = this.demux ? this.demux(attachmentName, data) : data;\r\n          attachment.draw(attachmentData);\r\n          promises.push(attachment.promise);\r\n        }\r\n\r\n        this.hasDrawn = true;\r\n\r\n        this.promise = Promise.all(promises);\r\n\r\n        this.postDraw();\r\n        this.trigger('postDraw', data);\r\n\r\n        this.promise.then(() => {\r\n          this.postTransition(data);\r\n          this.trigger('postTransition', data);\r\n        });\r\n\r\n        return data;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Subscribe a callback function to an event triggered on the chart. See {@link\r\n   * Chart#once} to subscribe a callback function to an event for one occurrence.\r\n   *\r\n   * @externalExample {runnable} chart-on\r\n   *\r\n   * @param {String} name Name of the event\r\n   * @param {ChartEventHandler} callback Function to be invoked when the event\r\n   *        occurs\r\n   * @param {Object} [context] Value to set as `this` when invoking the\r\n   *        `callback`. Defaults to the chart instance.\r\n   *\r\n   * @returns {Chart} A reference to this chart (chainable).\r\n   */\r\n  on(name, callback, context) {\r\n    var events;\r\n    if (this._events.has(name)) {\r\n      events = this._events.get(name);\r\n    } else {\r\n      events = new Set();\r\n    }\r\n\r\n    events.add({\r\n      callback: callback,\r\n      context: context || this,\r\n      _chart: this\r\n    });\r\n\r\n    this._events.set(name, events);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subscribe a callback function to an event triggered on the chart. This\r\n   * function will be invoked at the next occurrence of the event and immediately\r\n   * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\r\n   * event indefinitely.\r\n   *\r\n   * @externalExample {runnable} chart-once\r\n   *\r\n   * @param {String} name Name of the event\r\n   * @param {ChartEventHandler} callback Function to be invoked when the event\r\n   *        occurs\r\n   * @param {Object} [context] Value to set as `this` when invoking the\r\n   *        `callback`. Defaults to the chart instance\r\n   *\r\n   * @returns {Chart} A reference to this chart (chainable)\r\n   */\r\n  once(name, callback, context) {\r\n    var self = this;\r\n    var _once = function() {\r\n      self.off(name, _once);\r\n      callback.apply(this, arguments);\r\n    };\r\n    return this.on(name, _once, context);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe one or more callback functions from an event triggered on the\r\n   * chart. When no arguments are specified, *all* handlers will be unsubscribed.\r\n   * When only a `name` is specified, all handlers subscribed to that event will\r\n   * be unsubscribed. When a `name` and `callback` are specified, only that\r\n   * function will be unsubscribed from that event. When a `name` and `context`\r\n   * are specified (but `callback` is omitted), all events bound to the given\r\n   * event with the given context will be unsubscribed.\r\n   *\r\n   * @externalExample {runnable} chart-off\r\n   *\r\n   * @param {String} [name] Name of the event to be unsubscribed\r\n   * @param {ChartEventHandler} [callback] Function to be unsubscribed\r\n   * @param {Object} [context] Contexts to be unsubscribed\r\n   *\r\n   * @returns {Chart} A reference to this chart (chainable).\r\n   */\r\n  off(name, callback, context) {\r\n\r\n    // remove all events\r\n    if (arguments.length === 0) {\r\n      this._events.clear();\r\n      return this;\r\n    }\r\n\r\n    // remove all events for a specific name\r\n    if (arguments.length === 1) {\r\n      if (this._events.has(name)) {\r\n        this._events.get(name).clear();\r\n      }\r\n      return this;\r\n    }\r\n\r\n    // remove all events that match whatever combination of name, context\r\n    // and callback.\r\n\r\n    this._events.get(name).forEach((event, clone, map) => {\r\n      if ((callback && callback === clone.callback) ||\r\n          (context && context === clone.context)) {\r\n        map.delete(event);\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Publish an event on this chart with the given `name`.\r\n   *\r\n   * @externalExample {runnable} chart-trigger\r\n   *\r\n   * @param {String} name Name of the event to publish\r\n   * @param {...*} arguments Values with which to invoke the registered\r\n   *        callbacks.\r\n   *\r\n   * @returns {Chart} A reference to this chart (chainable).\r\n   */\r\n  trigger(name, ...args) {\r\n    if (this._events.has(name)) {\r\n      this._events.get(name).forEach((event) => {\r\n        event.callback.call(event.context, ...args);\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Cleanly dispose of chart\r\n   *\r\n   * @return undefined\r\n   */\r\n  destroy() {\r\n    var node = this.base.node();\r\n\r\n    // exposed properties\r\n    this.configs = {};\r\n    this.accessors = {};\r\n    this.promise = null;\r\n\r\n    // clear up remaining data\r\n    this._layers.clear();\r\n    this._attached.clear();\r\n    this._events.clear();\r\n\r\n    if (node.parentNode) {\r\n      node.parentNode.removeChild(node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get and set chart options (or configs)\r\n   *\r\n   * @param  {mixed} nameOrObject Name of item getting or setting\r\n   *                              or an object with key-value pairs.\r\n   * @param  {mixed} value The value for config item with that name.\r\n   * @return {mixed} if getting: the value. if setting: the chart instance.\r\n   */\r\n  config(nameOrObject, value) {\r\n    var key;\r\n    var definition;\r\n    var _Chart = this;\r\n\r\n    function setPercentage () {\r\n      function calculatePercentage (arr, initialValue) {\r\n        var min = Math.min.call(null, arr.map(function (name) { return _Chart.config(name); }));\r\n        return initialValue / min;\r\n      }\r\n\r\n      if (definition.constrain === true) {\r\n        definition.percentage = calculatePercentage(['width', 'height'], definition.value);\r\n      } else if (Array.isArray(definition.constrain)) {\r\n        definition.percentage = calculatePercentage(definition.constrain, definition.value);\r\n      } else {\r\n        definition.percentage = calculatePercentage([definition.constrain], definition.value);\r\n      }\r\n    }\r\n\r\n    if (arguments.length === 0) {\r\n      return this.configs;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      if (typeof nameOrObject === 'object') {\r\n        for (key in nameOrObject) {\r\n          if(this.configs.hasOwnProperty(key)) {\r\n            definition = this.configs[key];\r\n            if (definition.hasOwnProperty('setter')) {\r\n              definition.value = definition.setter.call(definition, nameOrObject[key]);\r\n            } else {\r\n              definition.value = nameOrObject[key];\r\n            }\r\n            if (definition.hasOwnProperty('constrain')) {\r\n              setPercentage();\r\n            }\r\n            this.configs[key] = definition;\r\n          } else {\r\n            console.warn(`config with name ${nameOrObject} is not defined.`);\r\n          }\r\n        }\r\n        return this;\r\n      }\r\n\r\n      kotoAssert(this.configs.hasOwnProperty(nameOrObject), `${nameOrObject} is not a valid option.`);\r\n      definition = this.configs[nameOrObject];\r\n      if (definition.hasOwnProperty('getter')) {\r\n        return definition.getter.call(definition);\r\n      }\r\n      return definition.value;\r\n    }\r\n\r\n    if(arguments.length === 2) {\r\n      if (this.configs.hasOwnProperty(nameOrObject)) {\r\n        definition = this.configs[nameOrObject];\r\n        if (definition.hasOwnProperty('setter')) {\r\n          definition.value = definition.setter.call(definition, value);\r\n        } else {\r\n          definition.value = value;\r\n        }\r\n        if (definition.hasOwnProperty('constrain')) {\r\n          setPercentage();\r\n        }\r\n        this.configs[nameOrObject] = definition;\r\n      } else {\r\n        console.warn(`config with name ${nameOrObject} is not defined.`);\r\n      }\r\n      return this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This will get or set any of the chart's accessors.\r\n   *\r\n   * @param  {String or Object} item If string, it will return the function for that accessor item.\r\n   *                                 If object, it will update that accessor with set function.\r\n   * @param  {function} [value] The function to update accessor item with.\r\n   * @return {object} The chart to preserve chainability.\r\n   */\r\n  accessor (item, value) {\r\n    var key;\r\n    if (arguments.length === 0) {\r\n      return this.accessors;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      if (typeof item === 'string') {\r\n        kotoAssert(this.accessors.hasOwnProperty(item), `${item} is not a valid accessor.`);\r\n        return this.accessors[item];\r\n      } else {\r\n        for (key in item) {\r\n          this.accessors[key] = item[key];\r\n        }\r\n      }\r\n    } else {\r\n      this.accessors[item] = value;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * This will extend a chart by passing in an object of initialize function.\r\n   * @param  {Object || function} init Initialize function of object with initialize method.\r\n   * @return {Construtor}      Chart constructor\r\n   */\r\n  static extend(init) {\r\n    class chart extends this {\r\n      constructor(selection) {\r\n        var key;\r\n        super(selection);\r\n\r\n        if (typeof init === 'function') {\r\n          init.call(this);\r\n        } else {\r\n          for (key in init) {\r\n            this[key] = init[key];\r\n          }\r\n          this.initialize.call(this);\r\n        }\r\n\r\n      }\r\n    }\r\n    return chart;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n* Expose the Layer class so that it can be subclassed.\r\n*/\r\nChart.Layer = Layer;\r\n\r\n// run tests if on test environment\r\nif (ON_TEST) {\r\n  require('./assert.spec.js')(kotoAssert);\r\n  require('./layer.spec.js')(Layer, Chart);\r\n  require('./chart.spec.js')(Chart);\r\n}\r\n\r\nmodule.exports = Chart;\r\n\n\n\n// WEBPACK FOOTER //\n// ./chart.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-polyfill\"\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3\"\n// module id = 2\n// module chunks = 0","/**\r\n * Simple Assertion function\r\n * @param  {anything} test    Anything that will evaluate to true of false.\r\n * @param  {string} message The error message to send if `test` is false\r\n */\r\nfunction kotoAssert(test, message) {\r\n  if (test) {\r\n    return;\r\n  }\r\n  throw new Error(`[koto] ${message}`);\r\n}\r\n\r\nexport default kotoAssert;\r\n\n\n\n// WEBPACK FOOTER //\n// ./assert.js","import kotoAssert from './assert.js';\r\nimport * as d3 from 'd3';\r\n\r\n/**\r\n * Create a layer using the provided `base` selection.\r\n *\r\n * @class\r\n *\r\n * @param {d3.selection} base The containing DOM node for the layer.\r\n * @param {Object} options Overrides for databind, insert and event methods.\r\n * @param {Function} options.databind databind override\r\n * @param {Function} options.insert insert override\r\n * @param {Function} [options.events] life-cycle event handler overrides.\r\n *                                  Possible values are [enter, update, merge, exit]\r\n *                                  with or without the 'transition postfix'.\r\n */\r\nclass Layer {\r\n  constructor(base, options) {\r\n    this._base = base;\r\n    this._handlers = {};\r\n    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\r\n\r\n    if (options) {\r\n      // Set layer methods (required)\r\n      this.dataBind = options.dataBind;\r\n      this.insert = options.insert;\r\n\r\n      // Bind events (optional)\r\n      if ('events' in options) {\r\n        for (var eventName in options.events) {\r\n          this.on(eventName, options.events[eventName]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\r\n   * implementation is \"virtual\"--it *must* be overridden by Layer instances.\r\n   *\r\n   * @param {Array} data Value passed to {@link Layer#draw}\r\n   * @param {Object} [context] the instance of this layers\r\n   */\r\n  dataBind() {\r\n    kotoAssert(false, 'Layers must specify a dataBind method.');\r\n  }\r\n\r\n  /**\r\n   * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\r\n   * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\r\n   * Layer instances.\r\n   */\r\n  insert() {\r\n    kotoAssert(false, 'Layers must specify an `insert` method.');\r\n  }\r\n\r\n  /**\r\n   * Subscribe a handler to a lifecycle event. These events (and only these\r\n   * events) are triggered when {@link Layer#draw} is invoked--see that method\r\n   * for more details on lifecycle events.\r\n   *\r\n   * @param {String} eventName Identifier for the lifecycle event for which to\r\n   *        subscribe.\r\n   * @param {Function} handler Callback function\r\n   *\r\n   * @returns {Chart} Reference to the layer instance (for chaining).\r\n   */\r\n  on(eventName, handler, options) {\r\n    options = options || {};\r\n\r\n    kotoAssert(this._lifecycleRe.test(eventName),\r\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\r\n\r\n    if (!(eventName in this._handlers)) {\r\n      this._handlers[eventName] = [];\r\n    }\r\n    this._handlers[eventName].push({\r\n      callback: handler,\r\n      chart: options.chart || null\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe the specified handler from the specified event. If no handler is\r\n   * supplied, remove *all* handlers from the event.\r\n   *\r\n   * @param {String} eventName Identifier for event from which to remove\r\n   *        unsubscribe\r\n   * @param {Function} handler Callback to remove from the specified event\r\n   *\r\n   * @returns {Chart} Reference to the layer instance (for chaining).\r\n   */\r\n  off(eventName, handler) {\r\n    var handlers = this._handlers[eventName];\r\n    var idx;\r\n\r\n    kotoAssert(this._lifecycleRe.test(eventName),\r\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\r\n\r\n    if (!handlers) {\r\n      return this;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      handlers.length = 0;\r\n      return this;\r\n    }\r\n\r\n    for (idx = handlers.length - 1; idx > -1; --idx) {\r\n      if (handlers[idx].callback === handler) {\r\n        handlers.splice(idx, 1);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Render the layer according to the input data. Bind the data to the layer\r\n   * (according to {@link Layer#dataBind}, insert new elements (according to\r\n   * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\r\n   * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\r\n   *\r\n   * - update\r\n   * - update:transition\r\n   * - enter\r\n   * - enter:transition\r\n   * - exit\r\n   * - exit:transition\r\n   *\r\n   * @param {Array} data Data to drive the rendering.\r\n   */\r\n  draw(data) {\r\n    var bound,\r\n      entering,\r\n      events,\r\n      selection,\r\n      method,\r\n      handlers,\r\n      eventName,\r\n      idx,\r\n      len,\r\n      tidx,\r\n      tlen,\r\n      promises = [];\r\n\r\n    function endAll(transition, callback) {\r\n      let n = 0;\r\n      transition\r\n        .each(function inc () { ++n; })\r\n        .on('end', function done (...args) {\r\n          if (!--n) {\r\n            callback.apply(this, args);\r\n          }\r\n        });\r\n    }\r\n\r\n    function promiseCallback (resolve) {\r\n      selection.call(endAll, function allDone () { return resolve(true); });\r\n    }\r\n\r\n    bound = this.dataBind.call(this._base, data, this);\r\n\r\n    kotoAssert(bound instanceof d3.selection,\r\n      'Invalid selection defined by `Layer#dataBind` method.');\r\n    kotoAssert(bound.enter, 'Layer selection not properly bound.');\r\n\r\n    entering = bound.enter();\r\n    entering._chart = this._base._chart;\r\n\r\n    events = [\r\n      {\r\n        name: 'update',\r\n        selection: bound\r\n      },\r\n      {\r\n        name: 'enter',\r\n        selection: entering,\r\n        method: this.insert\r\n      },\r\n      {\r\n        name: 'merge',\r\n        // Although the `merge` lifecycle event shares its selection object\r\n        // with the `update` lifecycle event, the object's contents will be\r\n        // modified when koto invokes the user-supplied `insert` method\r\n        // when triggering the `enter` event.\r\n        selection: bound\r\n      },\r\n      {\r\n        name: 'exit',\r\n        // Although the `exit` lifecycle event shares its selection object\r\n        // with the `update` and `merge` lifecycle events, the object's\r\n        // contents will be modified when koto invokes\r\n        // `d3.selection.exit`.\r\n        selection: bound,\r\n        method: bound.exit\r\n      }\r\n    ];\r\n\r\n    for (var i = 0, l = events.length; i < l; ++i) {\r\n      eventName = events[i].name;\r\n      selection = events[i].selection;\r\n      method = events[i].method;\r\n\r\n      // Some lifecycle selections modify shared state, so they must be\r\n      // deferred until just prior to handler invocation.\r\n      if (typeof method === 'function') {\r\n        selection = method.call(selection, selection);\r\n      }\r\n\r\n      if (selection.empty()) {\r\n        continue;\r\n      }\r\n\r\n      kotoAssert(selection && selection instanceof d3.selection,\r\n        `Invalid selection defined for ${eventName} lifecycle event.`);\r\n\r\n      handlers = this._handlers[eventName];\r\n\r\n      if (handlers) {\r\n        for (idx = 0, len = handlers.length; idx < len; ++idx) {\r\n          // Attach a reference to the parent chart so the selection's\r\n          // `chart` method will function correctly.\r\n          selection._chart = handlers[idx].chart || this._base._chart;\r\n          // selection.call(handlers[idx].callback);\r\n          handlers[idx].callback.call(selection, selection);\r\n        }\r\n      }\r\n\r\n      handlers = this._handlers[eventName + ':transition'];\r\n\r\n      if (handlers && handlers.length) {\r\n        selection = selection.transition();\r\n        for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\r\n          selection._chart = handlers[tidx].chart || this._base._chart;\r\n          // selection.call(handlers[tidx].callback);\r\n          handlers[tidx].callback.call(selection, selection);\r\n          promises.push(new Promise(promiseCallback));\r\n        }\r\n      }\r\n      this.promise = Promise.all(promises);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Layer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./layer.js"],"sourceRoot":""}